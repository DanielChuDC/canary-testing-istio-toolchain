---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: ${GIT_BRANCH}
    service: ${GIT_REPO}    
  triggers:
  - type: commit
  properties:
  - name: DOCKER_ROOT
    value: ${DOCKER_ROOT}
    type: text
  - name: DOCKER_FILE
    value: Dockerfile
    type: text  
  jobs:
  - name: Pre-build check
    type: builder
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/check_prebuild.sh")
  - name: Build Docker image
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/build_image.sh")
- name: VALIDATE
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  jobs:
  - name: Vulnerability Advisor
    type: tester
    test_type: vulnerabilityadvisor
    use_image_from_build_input: true
    fail_stage: false
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/check_vulnerabilities.sh")
- name: DARK LAUNCH
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: DEPLOYMENT_FILE
    value: deployment.yml
    type: text      
  jobs:
  - name: Pre-deploy check
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/check_predeploy_kubectl.sh")
  - name: Deploy dark
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      WORKING_DIR=$(pwd)
      mkdir ~/tmpbin && cd ~/tmpbin
      curl -L https://git.io/getLatestIstio | sh -
      ISTIO_BIN=$(find istio*/bin -maxdepth 0 -type d)
      export PATH=${ISTIO_BIN}:$PATH
      cd $WORKING_DIR
      #kubectl apply -f install/kubernetes/istio.yaml
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/deploy_kubectl.sh")
  - name: Functional tests
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      echo "Run some validation tests"
- name: 50% TRAFFIC
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text     
  jobs:
  - name: Enable 50% traffic
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      WORKING_DIR=$(pwd)
      mkdir ~/tmpbin && cd ~/tmpbin
      curl -L https://git.io/getLatestIstio | sh -
      ISTIO_BIN=$(find istio*/bin -maxdepth 0 -type d)
      export PATH=${ISTIO_BIN}:$PATH
      cd $WORKING_DIR
      #kubectl apply -f install/kubernetes/istio.yaml
- name: 100% TRAFFIC
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text     
  jobs:
  - name: Enable 100% traffic
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      WORKING_DIR=$(pwd)
      mkdir ~/tmpbin && cd ~/tmpbin
      curl -L https://git.io/getLatestIstio | sh -
      ISTIO_BIN=$(find istio*/bin -maxdepth 0 -type d)
      export PATH=${ISTIO_BIN}:$PATH
      cd $WORKING_DIR
      #kubectl apply -f install/kubernetes/istio.yaml
  - name: Finalize
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      echo "Could automate branch promotion for STABLE version"

