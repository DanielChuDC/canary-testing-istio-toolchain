---
stages:
- name: BUILD
  inputs:
  - type: git
    branch: ${GIT_BRANCH}
    service: ${GIT_REPO}
  triggers:
  - type: commit
  properties:
  - name: DOCKER_ROOT
    value: ${DOCKER_ROOT}
    type: text
  - name: DOCKER_FILE
    value: Dockerfile
    type: text  
  jobs:
  - name: Pre-build check
    type: builder
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/check_prebuild.sh")
  - name: Build Docker image
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/build_image.sh")
- name: VALIDATE
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  jobs:
  - name: Vulnerability Advisor
    type: tester
    test_type: vulnerabilityadvisor
    use_image_from_build_input: true
    fail_stage: false
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/check_vulnerabilities.sh")
- name: DEPLOY CANARY
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: DEPLOYMENT_FILE
    value: ${DEPLOYMENT_FILE}
    type: text      
  jobs:
  - name: Pre-deploy check
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/check_predeploy_kubectl.sh")
  - name: Deploy dark
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # Install 'yq' to process yaml files
      python -m site &> /dev/null && export PATH="$PATH:`python -m site --user-base`/bin"
      pip install yq
      echo -e "Updating $DEPLOYMENT_FILE to represent canary deployment: add label version, modify deployment name"
      CANARY_DEPLOYMENT_FILE=canary-${DEPLOYMENT_FILE} # prefix original deployment file name
      DEPLOYMENT_NAME=$( cat ${DEPLOYMENT_FILE} | yq -r '. | select(.kind=="Deployment") | .metadata.name' ) # read deployment name
      cat ${DEPLOYMENT_FILE} | yq --yaml-output --arg l canary --arg n ${DEPLOYMENT_NAME}-canary '. | select(.kind=="Deployment") | .metadata.labels.version = $l | .spec.template.metadata.labels.version = $l | .metadata.name = $n ' > ${CANARY_DEPLOYMENT_FILE}
      DEPLOYMENT_FILE=${CANARY_DEPLOYMENT_FILE} # replace original deployment file
      cat ${DEPLOYMENT_FILE}
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/deploy_kubectl.sh")
- name: CANARY DARK
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: DARK_TEST_FILE
    value: virtualservice-test.yaml
    type: text  
  jobs:
  - name: Route 0% traffic
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/istio_virtualservice_canary_dark.sh")
  - name: Functional tests
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      echo "Run some validation tests"
      echo "Provide link to Prometheus/Istio dashboard"
  - name: Chaos tests
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      echo "Run some chaos tests"
- name: CANARY 50% TRAFFIC
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text     
  jobs:
  - name: Route 50% traffic
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      CANARY_WEIGHT=50
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/istio_virtualservice_canary_weight.sh")
- name: CANARY 100% TRAFFIC
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text     
  jobs:
  - name: Route 100% traffic
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      CANARY_WEIGHT=100
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/istio_virtualservice_canary_weight.sh")
- name: CANARY FINALIZE (AFTER MERGE)
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text     
  jobs:
  - name: Discard canary deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      echo "Stop routing traffic"
      CANARY_WEIGHT=0
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/next/scripts/istio_virtualservice_canary_weight.sh")
      echo "Delete canary deployment"
      kubectl delete deployment ${IMAGE_NAME}-canary --namespace ${CLUSTER_NAMESPACE}
